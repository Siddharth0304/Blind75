bool dfs(vector<vector<char>>& board, string word, int c, int i, int j){
    if(c==word.size())
        return true;
    
    if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j] != word[c] || board[i][j]=='*')
        return false;
    char temp=board[i][j];
    board[i][j]='*';
    
    bool found = dfs(board,word,c+1,i-1,j)||dfs(board,word,c+1,i+1,j)||
                 dfs(board,word,c+1,i,j-1)||dfs(board,word,c+1,i,j+1);
    board[i][j]=temp;

    return found;
    
}
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int c=0;
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[c]){
                    if(dfs(board,word,c,i,j))
                        return true;
                }
            }
        }
        return false;
    }
};

//We use DFS approach. Search for adjacent elements and if element found mark it visited and move forward. If the result is false we again mark element as unvisited.
